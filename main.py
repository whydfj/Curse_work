#–î–∞–≤–∏–¥, "/login" - –æ–Ω –±—É–¥–µ—Ç –¥–ª—è –≤—Å–µ—Ö, –≤ –Ω–µ–º –Ω–∞–¥–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ —Ä–æ–ª–∏, –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞–º —á–µ–ª –∏–ª–∏ –Ω–µ—Ç
#/createUser —ç—Ç–æ –±—É–¥–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –æ–Ω —Ç–∞–º –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
#/mainWindowUser —ç—Ç–æ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ, –≥–¥–µ –±—É–¥–µ—Ç —Ç–∞–±–ª–∏—Ü–∞ —Å —Ç–∞—Å–∫–∞–º–∏, –∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –Ω–∏–º –±—É–¥–µ—Ç –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ))
#userSettings —ç—Ç–æ –±—É–¥–µ—Ç –æ–∫–Ω–æ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤–µ–± –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
#–µ—Å–ª–∏ –±—É–¥–µ—Ç —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å, —Ç–æ –¥–æ–±–∞–≤–ª—è–π, –ø—Ä–∏–Ω—Ü–∏–ø —è –¥—É–º–∞—é —Ç—ã –ø–æ–π–º–µ—à—å, –∫–∞–∂–¥–∞—è —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª, –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞—é –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –±–µ–∑ –≥–µ–º–æ—Ä–∞
#–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
#
#1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:
#‚Äî –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è
#‚Äî –î–≤–µ —Ä–æ–ª–∏: —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
#‚Äî –°–µ—Å—Å–∏–æ–Ω–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
#
#2. –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç:
#‚Äî –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
#‚Äî –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
#‚Äî –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã
#‚Äî –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
#‚Äî –û—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
#
#3. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ–∂–µ—Ç:
#‚Äî –í–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á
#‚Äî –û—Ç–º–µ—á–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100%)
#‚Äî –î–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–∞–º
#‚Äî –ü—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–∞–π–ª—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
"""–î–∞–≤–∏–¥, —è —Å–¥–µ–ª–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫—É ORM –Ω–∞—à–µ–π –ë–¥, –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã(—Ñ–∞–π–ª data_base_work):
all_users = session.query(User).all()
for user in all_users:
    if(user.role == "manager"):
        print(f"{user.username} {user.password_hash} {user.created_at}")

—Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª Password_hash.py, –æ–Ω –∫–∞–∫ —Ä–∞–∑ –±—É–¥–µ—Ç –≤—ã—Å—á–∏—Ç—ã–≤–∞—Ç—å —Ö—ç—à –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é BLAKE2b) –ø–æ—á–∏—Ç–∞–π –≤ –∏–Ω–µ—Ç–∏–∫–µ))
–ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∞ - password
–ø–∞—Ä–æ–ª—å –¥–ª—è user 123456
–ù–æ –æ–Ω–∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –¥–µ–ª–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ –∑–∞—Ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ

–¥–∞–ª–µ–µ —è –±–∞–ª–æ–≤–∞–ª—Å—è —Å –∏–∏ –∏ —Å–¥–µ–ª–∞–ª database_shortcat.py(–æ—á–µ–Ω—å —É–¥–æ–±–Ω–æ, –±—É–¥—É —Å–∞–º –¥–æ–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã—Å—Ç—Ä–æ, —á—Ç–æ-—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑ –±–¥)
—Å–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ –º–µ—Ç–æ–¥—ã –≤ –Ω–µ–º:

get_all_users - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤
get_user_by_username(username) - –ø–æ–ª—É—á–∏—Ç—å —é–∑–µ—Ä–∞ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É
get_tasks_by_user(user_id) - –ø–æ–ª—É—á–∏—Ç—å —é–∑–µ—Ä–æ–≤ –ø–æ —Ç–∞—Å–∫—É(–∑–∞–¥–∞—á–µ)
create_user(username, password_hash, role, name, surname) - —Å–æ–∑–¥–∞—Ç—å —é–∑–µ—Ä–∞ —Å —Ç–∞–∫–∏–º–∏ –ø–æ–ª—è–º–∏(–ø–æ–ª–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
create_task(employee_id, title, description, status="running", progress=0) - —Å–æ–∑–¥–∞—Ç—å —Ç–∞—Å–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞
get_login(username,password) (—É–∂–µ —Å–∞–º –¥–µ–ª–∞–ª) - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–∏–ª–∏ –∞–¥–º–∏–Ω–∞).
"""
import uvicorn
from fastapi import FastAPI, HTTPException, Response, Depends
from authx import AuthX, AuthXConfig
from fastapi.params import Depends
from pydantic import BaseModel, Field
from sqlalchemy import select
from starlette.responses import RedirectResponse

from DB_SQLite.data_base_work import new_session, Users

from DB_SQLite.database_shortcat import DatabaseManager as methods



#pydantic —Å—Ö–µ–º—ã
class User_Login_Schema(BaseModel):
    username: str = Field(max_length=60)
    password: str = Field(max_length=20)


class User_Create_Schema(BaseModel):
    username: str = Field(max_length=60)
    password: str = Field(max_length=20)
    role: str = Field(max_length=10)
    name: str = Field(max_length=15)
    surname: str = Field(max_length=15)


class User_Found_and_Delete_Schema(BaseModel):
    username: str = Field(max_length=60)


config = AuthXConfig()

config.JWT_ACCESS_COOKIE_NAME = "aboba"
config.JWT_SECRET_KEY = "test-secret-key"
config.JWT_TOKEN_LOCATION = ["cookies"]
config.JWT_COOKIE_CSRF_PROTECT = False  # üëà –æ—Ç–∫–ª—é—á–∞–µ–º CSRF –ø—Ä–æ–≤–µ—Ä–∫—É

security = AuthX(config=config)


app = FastAPI()


def is_manager(current_user: dict = Depends(security.access_token_required)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    user_id = int(dict(current_user)["sub"])

    with new_session() as session:
        users_role = session.execute(select(Users.role).where(Users.id == user_id))

    return users_role.scalar() == "manager"


@app.post("/login")
def login(user: User_Login_Schema, response: Response):
    # with new_session() as session:
    #     new_user = session.execute(select(Users).where(Users.username == user.username)).scalar_one_or_none()
    #     if new_user is None:
    #         raise HTTPException(status_code=409, detail="User is not found")
    #     return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω", "sss": new_user}
    t_user = methods.get_login(user.username, user.password)
    if t_user is None:
        raise HTTPException(status_code=409, detail="User is not found")

    token = security.create_access_token(uid=str(t_user.id))
    response.set_cookie(config.JWT_ACCESS_COOKIE_NAME, token)
    return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω", "sss": t_user, "token": token}


@app.post("/logout")
def logout(response: Response):
    response.delete_cookie(config.JWT_ACCESS_COOKIE_NAME, secure=False, httponly=True, samesite="lax")
    return {"message": "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", "status": True}


@app.post("/createUser")
def create_user(user: User_Create_Schema, current_user: dict = Depends(security.access_token_required)):
    user_id = int(dict(current_user)["sub"])
    with new_session() as session:
        users_role = session.execute(select(Users.role).where(Users.id == user_id))
    users_role = users_role.scalar()
    User = methods.get_user_by_username(user.username)
    if users_role != "manager":
        raise HTTPException(status_code=401, detail="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä!")
    if User is None:
        if len(user.password) < 4:
            raise HTTPException(status_code=404, detail="–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 4")
        methods.create_user(user.username, user.password, user.role, user.name, user.surname)
        return {"status": True, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"}
    else:
        raise HTTPException(status_code=405, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å!")


@app.post("/found")
def found_user(user: User_Found_and_Delete_Schema):
    User = methods.get_user_by_username(user.username)
    if User is not None:
        methods.get_user_by_username(user.username)
        return {"status": True, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω" , "name_user": User.name,"surname_user": User.surname,"role_user":User.role,"created_at": User.created_at}
    else:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


@app.delete("/found/delete")
def delete_user(user: User_Found_and_Delete_Schema):
    User = methods.get_user_by_username(user.username)
    if User is not None:
        methods.delete_user(user.username)
        return {"status": True, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω"}
    else:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


@app.post("/found/show_all")
def show_all():
    if methods.number_of_all_users() > 0:
        return methods.get_all_users()
    return {"status" : True, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}


@app.get("/userSettings")
def UserSettings():
    return {"–õ–û–ì–ò–ù –î–õ–Ø –í–°–ï–•"}


@app.get("/mainWindowUser")
def main_window_user():
    return {"–í—Å—è–∫–∏–µ —Ç–∞—Å–∫–∏, —Ö—É—è—Å–∫–∏"}


@app.get("/")
def main_page():
    return RedirectResponse(url="/login")
    #p = 0
    #if p == 2:
    #    return {"qq": 1}
#
    #raise HTTPException(status_code=404, detail="–Ω–µ –Ω–∞–π–¥–µ–Ω–æ(")


if __name__ == '__main__':
    uvicorn.run("main:app", reload=True)


#with new_session() as session:
#    print(session.execute(select(Users)).all())


